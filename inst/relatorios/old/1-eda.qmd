---
title: "Análise exploratória do SireneJud"
author: ABJ
date: "2022-11-04"
format: 
  # html:
  #   code-fold: true
  docx:
    reference-doc: template.docx
bibliography: geral.bib
lang: pt
execute:
  freeze: true
  echo: false
---

Este relatório mostra uma análise exploratória de dados (*Exploratory Data Analysis*, EDA) da base de dados do SireneJud. A base foi baixada no dia 04/09/2022, a partir de um arquivo CSV, contendo 588.197 linhas e 26 colunas. A base foi baixada a partir do [link de dados abertos da ferramenta do SireneJud](https://sirenejud.cnj.jus.br/mapa/geral).

<!-- Um detalhe importante é que o sistema SireneJud __removeu__ as informações de partes e movimentações dos dados abertos. Isso significa que __não é possível atualizar__ os dados para refazer as análises do presente relatório. -->

## Sobre a base de dados

A base de dados do SireneJud apresenta uma estrutura comum de bases de dados judiciais, contendo três unidades amostrais distintas: processos, partes e movimentações.

Os processos apresentam as seguintes colunas:

- `FID`: ID único, linha da base.
- `geom`: geometria do ponto de origem (latitude e longitude).
- `ano`: ano de distribuição do processo.
- `uf`: unidade federativa de distribuição do processo
- `municipio`: municipio de distribuição do processo
- `grau`: grau originário do processo (G1: primeiro grau, G2: segundo grau, JE: juizado especial, TR: turma recursal, TRU: turma recursal unificada).
- `esfera`: federal ou estadual.
- `tribunal`: tribunal de origem do processo
- `orgao`: órgão julgador (vara, câmara etc)
- `porte`: porte do tribunal, segundo classificação do CNJ disponível no relatório Justiça em Números
- `classe`: classe do processo segundo a SGT.
- `assunto`: códigos e nomes dos assuntos dos processos segundo a SGT
- `datas`: início do processo, julgamento e baixado. Caso o processo esteja ativo, a data de julgamento ou baixado é vazia.
- `tempo`: tempo de tramitação até o dia de extração dos dados.
- `julgamento`: indicador de processo concluído ou em andamento.
- `complexo`: indicador de processo de alta complexidade.

Os dados de partes apresentam as seguintes colunas:

- `polo`: ativo ou passivo
- `nome`: nome da parte
- `sexo`: sexo da parte (se pessoa física)
- `tipo`: jurídica ou física
- `documento`: CNPJ da parte, se juridica, e vazia caso contrário
- `nacionalidade`: nacionalidade da parte
- `assistencia`: assistência judiciária gratuita
- `intimacao`: intimação pendente

Os dados de movimentações apresentam as seguintes colunas:

- `data`: data da movimentação
- `grau`: grau da movimentação (primeiro grau, segundo grau, etc)
- `nome_situacao`: nome da situação
- `fase`: fase processual
- `tipo`: tipo de procedimento
- `natureza`: natureza do procedimento
- `nome`: nome do movimento
- `julgador`: nome do julgador
- `criminal`: indicador de criminal

No momento, vamos analisar somente os dados de __processos__ e __partes__. A análise das movimentações ficará para um estudo futuro.

## Filtros

O primeiro passo da análise é realizar filtros para obter uma base que faz parte do escopo da pesquisa. O escopo da pesquisa ainda não está totalmente definido no momento de escrita do presente relatório, mas vamos fazer algumas escolhas para facilitar a análise.

Os filtros aplicados no momento são:

- Apenas processos originários no primeiro grau ou segundo grau (remover juizado especial e turma recursal).
- Remover processos de alta complexidade
- Remover duplicatas de número de processo (ordenamos por grau antes de tirar as duplicatas)

```{r}
#| label: import
#| echo: false
da_basicas <- readr::read_rds("da_basicas.rds")
da_partes <- readr::read_rds("da_partes.rds")
da_rfb <- readr::read_rds("da_rfb.rds")
```

```{r}
#| label: filtros
da_basicas_filter <- da_basicas |> 
  dplyr::filter(
    st_grau %in% c("G1", "G2"),
    !sgt_complexo
  ) |> 
  dplyr::arrange(st_grau) |> 
  dplyr::distinct(id_processo, .keep_all = TRUE) |> 
  dplyr::select(-sgt_complexo, -id)
```

## Informações básicas

```{r}
#| label: contagens-gerais
n_estadual <- sum(da_basicas_filter$trib_esfera == "Estadual")
n_federal <- nrow(da_basicas_filter) - n_estadual

lab_estadual = glue::glue("{n_estadual} ({scales::percent(n_estadual/nrow(da_basicas_filter))})")

lab_tribunal_maior <- da_basicas_filter |> 
  dplyr::filter(trib_esfera == "Estadual") |> 
  dplyr::count(trib_tribunal, sort = TRUE) |> 
  dplyr::mutate(prop = scales::percent(n/sum(n), .1)) |> 
  dplyr::slice_head(n = 1) |> 
  with(glue::glue("{trib_tribunal}, com {n} ({prop})"))

```

Do total de `r nrow(da_basicas_filter)` processos, `r lab_estadual` são estaduais. Dentre os processos estaduais, o tribunal mais comum é o `r lab_tribunal_maior` dos processos estaduais.

As 10 classes mais comuns dos processos estão na @tbl-classe. Como as classes podem variar conforme a fase do processo (e.g. inquéito policial, cumprimento de sentença), é preciso tomar cuidado na hora de realizar filtros por essa variável.

```{r}
#| label: tbl-classe
#| tbl-cap: "Dez classes mais comuns."
da_basicas_filter |> 
  dplyr::count(sgt_nm_classe, sort = TRUE) |> 
  dplyr::mutate(prop = formattable::percent(n/sum(n))) |> 
  dplyr::slice_head(n = 10) |> 
  knitr::kable()
```

Os 10 assuntos mais comuns estão na @tbl-assunto. É possível notar que assuntos genéricos como "Dano Ambiental" e "DIREITO AMBIENTAL" são bastante presentes nos dados.

```{r}
#| label: tbl-assunto
#| tbl-cap: "Dez assuntos mais comuns. Um processo pode ter mais de um assunto."
da_basicas_filter |> 
  tidyr::unnest(sgt_nm_assunto) |> 
  dplyr::count(sgt_nm_assunto, sort = TRUE) |> 
  dplyr::mutate(prop = formattable::percent(n/sum(n))) |> 
  dplyr::slice_head(n = 10) |> 
  knitr::kable()
```

As combinações de classes e assuntos mais comuns estão na @tbl-classe-assunto. Aparentemente, as classes ajudam mais a pegar informações das fases (que estão disponíveis nas movimentações) do que do tipo de procedimento.

```{r}
#| label: tbl-classe-assunto
#| tbl-cap: "Dez combinações de classes e assuntos mais comuns. Um processo pode ter mais de um assunto."
da_basicas_filter |> 
  tidyr::unnest(sgt_nm_assunto) |> 
  dplyr::count(sgt_nm_classe, sgt_nm_assunto, sort = TRUE) |> 
  dplyr::mutate(prop = formattable::percent(n/sum(n))) |> 
  dplyr::slice_head(n = 10) |> 
  knitr::kable()
```

## Localização

A @fig-mapa mostra os pontos em que os processos foram distribuídos. A maior parte dos casos foi distribuída em Brasília, o que a princípio não faz muito sentido.

```{r}
#| label: fig-mapa
#| fig-cap: "Pontos de distribuição dos processos"
da_basicas_filter |> 
  dplyr::count(loc_lon, loc_lat) |> 
  ggplot2::ggplot() +
  ggplot2::aes(loc_lon, loc_lat, size = n, alpha = n) +
  ggplot2::geom_point(colour = viridis::viridis(1,1,.2,.8)) +
  ggplot2::theme_void() +
  ggplot2::coord_equal()
```

A @tbl-municipios mostra os 10 municípios com mais processos. A maioria são capitais, o que é esperado, já que são municípios mais populosos.

```{r}
#| label: tbl-municipios
#| tbl-cap: "Municípios com mais processos."
da_basicas_filter |> 
  dplyr::count(loc_uf, loc_muni, sort =  TRUE) |> 
  dplyr::mutate(prop = formattable::percent(n/sum(n))) |> 
  head(10) |> 
  knitr::kable()
```
A @tbl-ilg mostra os municípios com maior litigiosidade (processos por 100 mil habitantes). É possível identificar que vários municípios pequenos (com menos de 10 mil habitantes) figuram entre os mais litigiosos.

```{r}
#| label: tbl-ilg
#| tbl-cap: "Municípios com mais litigiosidade. Considerada população do Censo IBGE de 2010."
aux_pop <- da_basicas_filter |> 
  dplyr::count(loc_uf, loc_muni) |> 
  munifacil::limpar_colunas(loc_muni, loc_uf) |> 
  munifacil::incluir_codigo_ibge(diagnostico = FALSE) |> 
  dplyr::left_join(abjData::pnud_min, c("id_municipio" = "muni_id")) |> 
  dplyr::filter(ano == 2010)

aux_pop |> 
  dplyr::mutate(ilg = n / pop * 1e5) |> 
  dplyr::select(loc_uf, loc_muni, n, pop, ilg) |> 
  dplyr::arrange(dplyr::desc(ilg)) |> 
  dplyr::slice_head(n = 10) |> 
  knitr::kable()
```

A @tbl-ilg-50k mostra os municípios com maior litigiosidade, considerando somente municípios com mais de 50 mil habitantes. Novamente aparecem algumas capitais e figuram entre os mais litigiosos municípios do sul e sudeste.

```{r}
#| label: tbl-ilg-50k
#| tbl-cap: "Municípios com mais litigiosidade."
aux_pop |> 
  dplyr::mutate(ilg = n / pop * 1e5) |> 
  dplyr::filter(pop > 5e4) |> 
  dplyr::select(loc_uf, loc_muni, n, pop, ilg) |> 
  dplyr::arrange(dplyr::desc(ilg)) |> 
  dplyr::slice_head(n = 10) |> 
  knitr::kable()
```

Considerando somente os estados que fazem parte da Amazônia Legal e populações acima de 50 mil pessoas, temos a @tbl-ilg-50k-amazon. Barcarena e Altamira são as regiões com maior litigiosidade, acompanhadas das capitais Cuiabá e Porto Velho.

```{r}
#| label: tbl-ilg-50k-amazon
#| tbl-cap: "Municípios com mais litigiosidade."
amazon <- c("AC", "AM", "RR", "AP", "PA", "MA", "TO", "RO", "MT")

aux_pop |> 
  dplyr::filter(loc_uf %in% amazon) |> 
  dplyr::mutate(ilg = n / pop * 1e5) |> 
  dplyr::filter(pop > 5e4) |> 
  dplyr::select(loc_uf, loc_muni, n, pop, ilg) |> 
  dplyr::arrange(dplyr::desc(ilg)) |> 
  dplyr::slice_head(n = 10) |> 
  knitr::kable()
```

## Tempos

Como temos processos em andamento, a forma adequada de analisar os tempos é utilizando análise de sobrevivência [@colosimoAnaliseSobrevivenciaAplicada2006]. Faremos isso utilizando gráficos descritivos de Kaplan Meier. O resultado é a @fig-km. Foram retirados tempos maiores de 10 mil dias e tempos menores que zero. A mediana é de aproximadamente 98 meses, ou seja, 8 anos.

```{r}
#| label: fig-km
#| fig-cap: "Curva de sobrevivência dos tempos de tramitação dos processos"
km_geral <- da_basicas_filter |> 
  dplyr::filter(st_tempo > 0, st_tempo < 10000) |> 
  dplyr::mutate(st_tempo = st_tempo/30.25) |> 
  with(survival::survfit(survival::Surv(st_tempo, st_encerrado) ~ 1))

survminer::ggsurvplot(
  km_geral, 
  data = da_basicas_filter, 
  surv.median.line = "hv"
)
```

A @fig-km-classe mostra a disribuição dos tempos por classe, considerando as cinco classes com maior volume processual. As curvas são parecidas em forma e apresentam medianas similares. Inquéritos policiais, ações civis públicas e crimes ambientais apresentam tempos medianos acima de 110 meses.

```{r}
#| label: fig-km-classe
#| fig-cap: "Curva de sobrevivência dos tempos de tramitação dos processos, por classe"
aux_km_classe <- da_basicas_filter |> 
  dplyr::mutate(
    classe = stringr::str_wrap(sgt_nm_classe, 20),
    classe = forcats::fct_lump_n(classe, 5, other_level = "Outros")
  ) |> 
  dplyr::filter(st_tempo > 0, st_tempo < 10000) |> 
  dplyr::mutate(st_tempo = st_tempo/30.25)

km_classe <- aux_km_classe |> 
  with(survival::survfit(survival::Surv(st_tempo, st_encerrado) ~ classe))

gg <- survminer::ggsurvplot(
  km_classe, 
  data = aux_km_classe,
  surv.median.line = "h"
)

gg$plot +
  ggplot2::scale_colour_viridis_d(begin = .1, end = .9, option = 1)
```

A @fig-km-assunto mostra a disribuição dos tempos por assunto, considerando os cinco assuntos com maior volume. As curvas são parecidas em forma e apresentam medianas similares.

```{r}
#| label: fig-km-assunto
#| fig-cap: "Curva de sobrevivência dos tempos de tramitação dos processos, por assunto"
aux_km_assunto <- da_basicas_filter |> 
  tidyr::unnest(sgt_nm_assunto) |> 
  dplyr::mutate(
    assunto = stringr::str_wrap(sgt_nm_assunto, 20),
    assunto = forcats::fct_lump_n(assunto, 5, other_level = "Outros")
  ) |> 
  dplyr::filter(st_tempo > 0, st_tempo < 10000) |> 
  dplyr::mutate(st_tempo = st_tempo/30.25)

km_assunto <- aux_km_assunto |> 
  with(survival::survfit(survival::Surv(st_tempo, st_encerrado) ~ assunto))

gg <- survminer::ggsurvplot(
  km_assunto, 
  data = aux_km_assunto,
  surv.median.line = "h"
)

gg$plot +
  ggplot2::scale_colour_viridis_d(begin = .1, end = .9, option = 1)
```

## Partes

Nessa seção, estudamos apenas o polo passivo das ações. A base de dados estava com o nome da coluna `partes_at_desc` com o valor "polo passivo". No entanto, ao considerar que "at" significa "passivo", os resultados não fizeram muito sentido (ministério público tinha a maioria dos casos). Portanto, consideramos os casos "pa" como "passivo".

A @tbl-tipo-pessoa mostra os tipos de pessoa. A maior parte é de pessoas jurídicas, sendo que quase 1% da base possui autoridades, orgão de representação ou valores vazios.

```{r}
#| label: tbl-tipo-pessoa
#| tbl-cap: "Tipos de pessoa"
da_partes |> 
  dplyr::count(tipo_pessoa, sort = TRUE) |> 
  dplyr::mutate(prop = formattable::percent(n/sum(n))) |> 
  janitor::adorn_totals() |> 
  knitr::kable()
```


Vamos analisar apenas as pessoas jurídicas. Dentre as partes, aproximadamente 10% tem CNPJ vazio e 90% preenchido. No total, são cerca de 48000 CNPJs distintos e com 14 dígitos, que foram pesquisados na base de dados abertos da Receita Federal do Brasil (RFB). Quase a totalidade (99%) foram encontrados. Alguns resultados disso foram colocados a seguir.

```{r}
#| label: join
da_partes_rfb <- da_partes |> 
  dplyr::inner_join(da_rfb, c("numero_documento_principal" = "cnpj"))
```


A @tbl-litigantes mostra os quinze maiores litigantes. O nome que mais aparece é o vazio, que são casos em que o campo do CNPJ está vazio. Em seguida, vem a Samarco e a Vale.

```{r}
#| label: tbl-litigantes
#| tbl-cap: "10 Maiores litigantes nos processos"

da_partes_rfb |> 
  dplyr::group_by(nome_fantasia) |> 
  dplyr::summarise(n_processos = dplyr::n_distinct(id)) |> 
  dplyr::arrange(dplyr::desc(n_processos)) |> 
  dplyr::mutate(prop = formattable::percent(n_processos/nrow(da_basicas))) |> 
  head(15) |> 
  knitr::kable()

```

A @tbl-cnae mostra as atividades principais das empresas no polo passivo, de acordo com a informação da "Classe" da tabela CNAE. Os casos de "administração pública em geral" provavelmente se referem a diferentes entidades públicas.

```{r}
#| label: tbl-cnae
#| tbl-cap: "Quantidade de partes-processos por tipo de atividade."

da_partes_rfb |> 
  dplyr::select(id, cnae_principal, situacao, matriz) |> 
  dplyr::inner_join(qsacnpj::tab_cnae, c("cnae_principal" = "cod_cnae")) |> 
  dplyr::group_by(nm_classe) |> 
  dplyr::summarise(n_processos = dplyr::n_distinct(id)) |> 
  dplyr::arrange(dplyr::desc(n_processos)) |> 
  dplyr::mutate(prop = formattable::percent(n_processos/nrow(da_basicas))) |> 
  head(n = 10) |> 
  knitr::kable()
```

A tabela da RFB permite fazer muitos outros cruzamentos. Ela contém informações como localização da sede, situação da empresa, natureza da empresa, quantidade de sócios, entre outras.
